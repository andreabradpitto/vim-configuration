set nocompatible " Equals set nocp. Disables vi compatibility mode, so that many modern features will be available. When using a vimrc, it gets enabled by default
set viminfo+=n~/.vim/.viminfo " Specifies .viminfo location; defaults to ~
set number " Show line numbers. Combined with below setting, I can get the hybrid mode
set relativenumber " Show relative line numbers
set hidden " Allows to have unsaved work also on buffers that are currently not shown on screen
set fileformats=unix,dos " Make `vimrc` compatible with Unix and DOS environment. Check line finishers with `:set fileformat?`, and set them with `:set ff=unix | :w`
filetype plugin on

" Custom command to update installed plugins + vim-plug upgrade.
" In general, the ! is not required for a command definition
command! PU PlugUpdate | PlugUpgrade

" Install vim-plug if not found (github.com/junegunn/vim-plug/wiki/tutorial)
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

" Plugins will be downloaded under the specified directory
call plug#begin(has('nvim') ? stdpath('data') . '/plugged' : '~/.vim/plugged')

" Declare the list of plugins
Plug 'junegunn/vim-plug' " Added to have the `help plug-options` within the Vim command line
Plug 'tpope/vim-sensible'
Plug 'junegunn/seoul256.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" List ends here. Plugins become visible to Vim after this call
" Initialize plugin system
" - Automatically executes `filetype plugin indent on` and `syntax enable`.
call plug#end()
" You can revert the settings after the call like so:
"   filetype indent off   " Disable file-type-specific indentation
"   syntax off            " Disable syntax highlighting

" Substitutes the `grep` command with `rg --vimgrep --smart-case --follow` (rg stands for ripgrep)
" set grepprg=rg\ --vimgrep\ --smart-case\ --follow

" Edit to seoul256 (dark) background color scheme:
" Range: 233 (darkest) ~ 239 (lightest)
" Default: 237
" let g:seoul256_background = 236
" colo seoul256

" Set custom color scheme:
" colorscheme seoul256

" Netrw (i.e., Vim default file system explorer) settings
" These settings make Netrw look/behave a bit more like NERDTree
let g:netrw_banner = 0 " Hide help banner. To show it, press `I`
let g:netrw_liststyle = 3 " Selected style. Switch the available ones with `i`
let g:netrw_browse_split = 4 " Choose the way windows get opened by Netrw
let g:netrw_altv = 1
let g:netrw_winsize = 25 " Screen percentage occupied by Netrw
" augroup ProjectDrawer
"   autocmd!
"   autocmd VimEnter * :Vexplore " Open Netrw at launch
" augroup END
